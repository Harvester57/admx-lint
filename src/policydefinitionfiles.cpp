// Copyright (c) 2005-2017 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "policydefinitionfiles.h"

namespace GroupPolicy
{
  namespace PolicyDefinitions
  {
    // Localization
    // 

    const Localization::StringTableOptional& Localization::
    stringTable () const
    {
      return this->stringTable_;
    }

    Localization::StringTableOptional& Localization::
    stringTable ()
    {
      return this->stringTable_;
    }

    void Localization::
    stringTable (const StringTableType& x)
    {
      this->stringTable_.set (x);
    }

    void Localization::
    stringTable (const StringTableOptional& x)
    {
      this->stringTable_ = x;
    }

    void Localization::
    stringTable (::std::unique_ptr< StringTableType > x)
    {
      this->stringTable_.set (std::move (x));
    }

    const Localization::PresentationTableOptional& Localization::
    presentationTable () const
    {
      return this->presentationTable_;
    }

    Localization::PresentationTableOptional& Localization::
    presentationTable ()
    {
      return this->presentationTable_;
    }

    void Localization::
    presentationTable (const PresentationTableType& x)
    {
      this->presentationTable_.set (x);
    }

    void Localization::
    presentationTable (const PresentationTableOptional& x)
    {
      this->presentationTable_ = x;
    }

    void Localization::
    presentationTable (::std::unique_ptr< PresentationTableType > x)
    {
      this->presentationTable_.set (std::move (x));
    }


    // FileReference
    // 

    const FileReference::FileNameType& FileReference::
    fileName () const
    {
      return this->fileName_.get ();
    }

    FileReference::FileNameType& FileReference::
    fileName ()
    {
      return this->fileName_.get ();
    }

    void FileReference::
    fileName (const FileNameType& x)
    {
      this->fileName_.set (x);
    }

    void FileReference::
    fileName (::std::unique_ptr< FileNameType > x)
    {
      this->fileName_.set (std::move (x));
    }


    // PolicyList
    // 

    const PolicyList::PolicySequence& PolicyList::
    policy () const
    {
      return this->policy_;
    }

    PolicyList::PolicySequence& PolicyList::
    policy ()
    {
      return this->policy_;
    }

    void PolicyList::
    policy (const PolicySequence& s)
    {
      this->policy_ = s;
    }


    // SupportedOnTable
    // 

    const SupportedOnTable::ProductsOptional& SupportedOnTable::
    products () const
    {
      return this->products_;
    }

    SupportedOnTable::ProductsOptional& SupportedOnTable::
    products ()
    {
      return this->products_;
    }

    void SupportedOnTable::
    products (const ProductsType& x)
    {
      this->products_.set (x);
    }

    void SupportedOnTable::
    products (const ProductsOptional& x)
    {
      this->products_ = x;
    }

    void SupportedOnTable::
    products (::std::unique_ptr< ProductsType > x)
    {
      this->products_.set (std::move (x));
    }

    const SupportedOnTable::DefinitionsOptional& SupportedOnTable::
    definitions () const
    {
      return this->definitions_;
    }

    SupportedOnTable::DefinitionsOptional& SupportedOnTable::
    definitions ()
    {
      return this->definitions_;
    }

    void SupportedOnTable::
    definitions (const DefinitionsType& x)
    {
      this->definitions_.set (x);
    }

    void SupportedOnTable::
    definitions (const DefinitionsOptional& x)
    {
      this->definitions_ = x;
    }

    void SupportedOnTable::
    definitions (::std::unique_ptr< DefinitionsType > x)
    {
      this->definitions_.set (std::move (x));
    }


    // CategoryList
    // 

    const CategoryList::CategorySequence& CategoryList::
    category () const
    {
      return this->category_;
    }

    CategoryList::CategorySequence& CategoryList::
    category ()
    {
      return this->category_;
    }

    void CategoryList::
    category (const CategorySequence& s)
    {
      this->category_ = s;
    }


    // PolicyNamespaceAssociation
    // 

    const PolicyNamespaceAssociation::PrefixType& PolicyNamespaceAssociation::
    prefix () const
    {
      return this->prefix_.get ();
    }

    PolicyNamespaceAssociation::PrefixType& PolicyNamespaceAssociation::
    prefix ()
    {
      return this->prefix_.get ();
    }

    void PolicyNamespaceAssociation::
    prefix (const PrefixType& x)
    {
      this->prefix_.set (x);
    }

    void PolicyNamespaceAssociation::
    prefix (::std::unique_ptr< PrefixType > x)
    {
      this->prefix_.set (std::move (x));
    }

    const PolicyNamespaceAssociation::NamespaceType& PolicyNamespaceAssociation::
    namespace_ () const
    {
      return this->namespace__.get ();
    }

    PolicyNamespaceAssociation::NamespaceType& PolicyNamespaceAssociation::
    namespace_ ()
    {
      return this->namespace__.get ();
    }

    void PolicyNamespaceAssociation::
    namespace_ (const NamespaceType& x)
    {
      this->namespace__.set (x);
    }

    void PolicyNamespaceAssociation::
    namespace_ (::std::unique_ptr< NamespaceType > x)
    {
      this->namespace__.set (std::move (x));
    }


    // PolicyNamespaces
    // 

    const PolicyNamespaces::TargetType& PolicyNamespaces::
    target () const
    {
      return this->target_.get ();
    }

    PolicyNamespaces::TargetType& PolicyNamespaces::
    target ()
    {
      return this->target_.get ();
    }

    void PolicyNamespaces::
    target (const TargetType& x)
    {
      this->target_.set (x);
    }

    void PolicyNamespaces::
    target (::std::unique_ptr< TargetType > x)
    {
      this->target_.set (std::move (x));
    }

    const PolicyNamespaces::UsingSequence& PolicyNamespaces::
    using_ () const
    {
      return this->using__;
    }

    PolicyNamespaces::UsingSequence& PolicyNamespaces::
    using_ ()
    {
      return this->using__;
    }

    void PolicyNamespaces::
    using_ (const UsingSequence& s)
    {
      this->using__ = s;
    }


    // LocalizationResourceReference
    // 

    const LocalizationResourceReference::MinRequiredRevisionType& LocalizationResourceReference::
    minRequiredRevision () const
    {
      return this->minRequiredRevision_.get ();
    }

    LocalizationResourceReference::MinRequiredRevisionType& LocalizationResourceReference::
    minRequiredRevision ()
    {
      return this->minRequiredRevision_.get ();
    }

    void LocalizationResourceReference::
    minRequiredRevision (const MinRequiredRevisionType& x)
    {
      this->minRequiredRevision_.set (x);
    }

    void LocalizationResourceReference::
    minRequiredRevision (::std::unique_ptr< MinRequiredRevisionType > x)
    {
      this->minRequiredRevision_.set (std::move (x));
    }

    const LocalizationResourceReference::FallbackCultureType& LocalizationResourceReference::
    fallbackCulture () const
    {
      return this->fallbackCulture_.get ();
    }

    LocalizationResourceReference::FallbackCultureType& LocalizationResourceReference::
    fallbackCulture ()
    {
      return this->fallbackCulture_.get ();
    }

    void LocalizationResourceReference::
    fallbackCulture (const FallbackCultureType& x)
    {
      this->fallbackCulture_.set (x);
    }

    void LocalizationResourceReference::
    fallbackCulture (::std::unique_ptr< FallbackCultureType > x)
    {
      this->fallbackCulture_.set (std::move (x));
    }

    const LocalizationResourceReference::FallbackCultureType& LocalizationResourceReference::
    fallbackCulture_default_value ()
    {
      return fallbackCulture_default_value_;
    }


    // PolicyDefinitions
    // 

    const PolicyDefinitions::PolicyNamespacesType& PolicyDefinitions::
    policyNamespaces () const
    {
      return this->policyNamespaces_.get ();
    }

    PolicyDefinitions::PolicyNamespacesType& PolicyDefinitions::
    policyNamespaces ()
    {
      return this->policyNamespaces_.get ();
    }

    void PolicyDefinitions::
    policyNamespaces (const PolicyNamespacesType& x)
    {
      this->policyNamespaces_.set (x);
    }

    void PolicyDefinitions::
    policyNamespaces (::std::unique_ptr< PolicyNamespacesType > x)
    {
      this->policyNamespaces_.set (std::move (x));
    }

    const PolicyDefinitions::SupersededAdmSequence& PolicyDefinitions::
    supersededAdm () const
    {
      return this->supersededAdm_;
    }

    PolicyDefinitions::SupersededAdmSequence& PolicyDefinitions::
    supersededAdm ()
    {
      return this->supersededAdm_;
    }

    void PolicyDefinitions::
    supersededAdm (const SupersededAdmSequence& s)
    {
      this->supersededAdm_ = s;
    }

    const PolicyDefinitions::AnnotationSequence& PolicyDefinitions::
    annotation () const
    {
      return this->annotation_;
    }

    PolicyDefinitions::AnnotationSequence& PolicyDefinitions::
    annotation ()
    {
      return this->annotation_;
    }

    void PolicyDefinitions::
    annotation (const AnnotationSequence& s)
    {
      this->annotation_ = s;
    }

    const PolicyDefinitions::ResourcesType& PolicyDefinitions::
    resources () const
    {
      return this->resources_.get ();
    }

    PolicyDefinitions::ResourcesType& PolicyDefinitions::
    resources ()
    {
      return this->resources_.get ();
    }

    void PolicyDefinitions::
    resources (const ResourcesType& x)
    {
      this->resources_.set (x);
    }

    void PolicyDefinitions::
    resources (::std::unique_ptr< ResourcesType > x)
    {
      this->resources_.set (std::move (x));
    }

    const PolicyDefinitions::SupportedOnOptional& PolicyDefinitions::
    supportedOn () const
    {
      return this->supportedOn_;
    }

    PolicyDefinitions::SupportedOnOptional& PolicyDefinitions::
    supportedOn ()
    {
      return this->supportedOn_;
    }

    void PolicyDefinitions::
    supportedOn (const SupportedOnType& x)
    {
      this->supportedOn_.set (x);
    }

    void PolicyDefinitions::
    supportedOn (const SupportedOnOptional& x)
    {
      this->supportedOn_ = x;
    }

    void PolicyDefinitions::
    supportedOn (::std::unique_ptr< SupportedOnType > x)
    {
      this->supportedOn_.set (std::move (x));
    }

    const PolicyDefinitions::CategoriesOptional& PolicyDefinitions::
    categories () const
    {
      return this->categories_;
    }

    PolicyDefinitions::CategoriesOptional& PolicyDefinitions::
    categories ()
    {
      return this->categories_;
    }

    void PolicyDefinitions::
    categories (const CategoriesType& x)
    {
      this->categories_.set (x);
    }

    void PolicyDefinitions::
    categories (const CategoriesOptional& x)
    {
      this->categories_ = x;
    }

    void PolicyDefinitions::
    categories (::std::unique_ptr< CategoriesType > x)
    {
      this->categories_.set (std::move (x));
    }

    const PolicyDefinitions::PoliciesOptional& PolicyDefinitions::
    policies () const
    {
      return this->policies_;
    }

    PolicyDefinitions::PoliciesOptional& PolicyDefinitions::
    policies ()
    {
      return this->policies_;
    }

    void PolicyDefinitions::
    policies (const PoliciesType& x)
    {
      this->policies_.set (x);
    }

    void PolicyDefinitions::
    policies (const PoliciesOptional& x)
    {
      this->policies_ = x;
    }

    void PolicyDefinitions::
    policies (::std::unique_ptr< PoliciesType > x)
    {
      this->policies_.set (std::move (x));
    }

    const PolicyDefinitions::RevisionType& PolicyDefinitions::
    revision () const
    {
      return this->revision_.get ();
    }

    PolicyDefinitions::RevisionType& PolicyDefinitions::
    revision ()
    {
      return this->revision_.get ();
    }

    void PolicyDefinitions::
    revision (const RevisionType& x)
    {
      this->revision_.set (x);
    }

    void PolicyDefinitions::
    revision (::std::unique_ptr< RevisionType > x)
    {
      this->revision_.set (std::move (x));
    }

    const PolicyDefinitions::SchemaVersionType& PolicyDefinitions::
    schemaVersion () const
    {
      return this->schemaVersion_.get ();
    }

    PolicyDefinitions::SchemaVersionType& PolicyDefinitions::
    schemaVersion ()
    {
      return this->schemaVersion_.get ();
    }

    void PolicyDefinitions::
    schemaVersion (const SchemaVersionType& x)
    {
      this->schemaVersion_.set (x);
    }

    void PolicyDefinitions::
    schemaVersion (::std::unique_ptr< SchemaVersionType > x)
    {
      this->schemaVersion_.set (std::move (x));
    }


    // PolicyDefinitionResources
    // 

    const PolicyDefinitionResources::DisplayNameType& PolicyDefinitionResources::
    displayName () const
    {
      return this->displayName_.get ();
    }

    PolicyDefinitionResources::DisplayNameType& PolicyDefinitionResources::
    displayName ()
    {
      return this->displayName_.get ();
    }

    void PolicyDefinitionResources::
    displayName (const DisplayNameType& x)
    {
      this->displayName_.set (x);
    }

    void PolicyDefinitionResources::
    displayName (::std::unique_ptr< DisplayNameType > x)
    {
      this->displayName_.set (std::move (x));
    }

    const PolicyDefinitionResources::DescriptionType& PolicyDefinitionResources::
    description () const
    {
      return this->description_.get ();
    }

    PolicyDefinitionResources::DescriptionType& PolicyDefinitionResources::
    description ()
    {
      return this->description_.get ();
    }

    void PolicyDefinitionResources::
    description (const DescriptionType& x)
    {
      this->description_.set (x);
    }

    void PolicyDefinitionResources::
    description (::std::unique_ptr< DescriptionType > x)
    {
      this->description_.set (std::move (x));
    }

    const PolicyDefinitionResources::AnnotationSequence& PolicyDefinitionResources::
    annotation () const
    {
      return this->annotation_;
    }

    PolicyDefinitionResources::AnnotationSequence& PolicyDefinitionResources::
    annotation ()
    {
      return this->annotation_;
    }

    void PolicyDefinitionResources::
    annotation (const AnnotationSequence& s)
    {
      this->annotation_ = s;
    }

    const PolicyDefinitionResources::ResourcesType& PolicyDefinitionResources::
    resources () const
    {
      return this->resources_.get ();
    }

    PolicyDefinitionResources::ResourcesType& PolicyDefinitionResources::
    resources ()
    {
      return this->resources_.get ();
    }

    void PolicyDefinitionResources::
    resources (const ResourcesType& x)
    {
      this->resources_.set (x);
    }

    void PolicyDefinitionResources::
    resources (::std::unique_ptr< ResourcesType > x)
    {
      this->resources_.set (std::move (x));
    }

    const PolicyDefinitionResources::RevisionType& PolicyDefinitionResources::
    revision () const
    {
      return this->revision_.get ();
    }

    PolicyDefinitionResources::RevisionType& PolicyDefinitionResources::
    revision ()
    {
      return this->revision_.get ();
    }

    void PolicyDefinitionResources::
    revision (const RevisionType& x)
    {
      this->revision_.set (x);
    }

    void PolicyDefinitionResources::
    revision (::std::unique_ptr< RevisionType > x)
    {
      this->revision_.set (std::move (x));
    }

    const PolicyDefinitionResources::SchemaVersionType& PolicyDefinitionResources::
    schemaVersion () const
    {
      return this->schemaVersion_.get ();
    }

    PolicyDefinitionResources::SchemaVersionType& PolicyDefinitionResources::
    schemaVersion ()
    {
      return this->schemaVersion_.get ();
    }

    void PolicyDefinitionResources::
    schemaVersion (const SchemaVersionType& x)
    {
      this->schemaVersion_.set (x);
    }

    void PolicyDefinitionResources::
    schemaVersion (::std::unique_ptr< SchemaVersionType > x)
    {
      this->schemaVersion_.set (std::move (x));
    }


    // StringTable
    // 

    const StringTable::StringSequence& StringTable::
    string () const
    {
      return this->string_;
    }

    StringTable::StringSequence& StringTable::
    string ()
    {
      return this->string_;
    }

    void StringTable::
    string (const StringSequence& s)
    {
      this->string_ = s;
    }


    // PresentationTable
    // 

    const PresentationTable::PresentationSequence& PresentationTable::
    presentation () const
    {
      return this->presentation_;
    }

    PresentationTable::PresentationSequence& PresentationTable::
    presentation ()
    {
      return this->presentation_;
    }

    void PresentationTable::
    presentation (const PresentationSequence& s)
    {
      this->presentation_ = s;
    }
  }
}

#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace GroupPolicy
{
  namespace PolicyDefinitions
  {
    // Localization
    //

    Localization::
    Localization ()
    : ::xml_schema::Type (),
      stringTable_ (this),
      presentationTable_ (this)
    {
    }

    Localization::
    Localization (const Localization& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      stringTable_ (x.stringTable_, f, this),
      presentationTable_ (x.presentationTable_, f, this)
    {
    }

    Localization::
    Localization (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      stringTable_ (this),
      presentationTable_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void Localization::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // stringTable
        //
        if (n.name () == "stringTable" && n.namespace_ () == "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions")
        {
          ::std::unique_ptr< StringTableType > r (
            StringTableTraits::create (i, f, this));

          if (!this->stringTable_)
          {
            this->stringTable_.set (::std::move (r));
            continue;
          }
        }

        // presentationTable
        //
        if (n.name () == "presentationTable" && n.namespace_ () == "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions")
        {
          ::std::unique_ptr< PresentationTableType > r (
            PresentationTableTraits::create (i, f, this));

          if (!this->presentationTable_)
          {
            this->presentationTable_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    Localization* Localization::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Localization (*this, f, c);
    }

    Localization& Localization::
    operator= (const Localization& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->stringTable_ = x.stringTable_;
        this->presentationTable_ = x.presentationTable_;
      }

      return *this;
    }

    Localization::
    ~Localization ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, Localization >
    _xsd_Localization_type_factory_init (
      "Localization",
      "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions");

    // FileReference
    //

    FileReference::
    FileReference (const FileNameType& fileName)
    : ::xml_schema::Type (),
      fileName_ (fileName, this)
    {
    }

    FileReference::
    FileReference (const FileReference& x,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      fileName_ (x.fileName_, f, this)
    {
    }

    FileReference::
    FileReference (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      fileName_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
        this->parse (p, f);
      }
    }

    void FileReference::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "fileName" && n.namespace_ ().empty ())
        {
          this->fileName_.set (FileNameTraits::create (i, f, this));
          continue;
        }
      }

      if (!fileName_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "fileName",
          "");
      }
    }

    FileReference* FileReference::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class FileReference (*this, f, c);
    }

    FileReference& FileReference::
    operator= (const FileReference& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->fileName_ = x.fileName_;
      }

      return *this;
    }

    FileReference::
    ~FileReference ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, FileReference >
    _xsd_FileReference_type_factory_init (
      "FileReference",
      "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions");

    // PolicyList
    //

    PolicyList::
    PolicyList ()
    : ::xml_schema::Type (),
      policy_ (this)
    {
    }

    PolicyList::
    PolicyList (const PolicyList& x,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      policy_ (x.policy_, f, this)
    {
    }

    PolicyList::
    PolicyList (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      policy_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void PolicyList::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // policy
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "policy",
              "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions",
              &::xsd::cxx::tree::factory_impl< PolicyType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< PolicyType > r (
              dynamic_cast< PolicyType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->policy_.push_back (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    PolicyList* PolicyList::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class PolicyList (*this, f, c);
    }

    PolicyList& PolicyList::
    operator= (const PolicyList& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->policy_ = x.policy_;
      }

      return *this;
    }

    PolicyList::
    ~PolicyList ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, PolicyList >
    _xsd_PolicyList_type_factory_init (
      "PolicyList",
      "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions");

    // SupportedOnTable
    //

    SupportedOnTable::
    SupportedOnTable ()
    : ::xml_schema::Type (),
      products_ (this),
      definitions_ (this)
    {
    }

    SupportedOnTable::
    SupportedOnTable (const SupportedOnTable& x,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      products_ (x.products_, f, this),
      definitions_ (x.definitions_, f, this)
    {
    }

    SupportedOnTable::
    SupportedOnTable (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      products_ (this),
      definitions_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void SupportedOnTable::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // products
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "products",
              "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions",
              &::xsd::cxx::tree::factory_impl< ProductsType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->products_)
            {
              ::std::unique_ptr< ProductsType > r (
                dynamic_cast< ProductsType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->products_.set (::std::move (r));
              continue;
            }
          }
        }

        // definitions
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "definitions",
              "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions",
              &::xsd::cxx::tree::factory_impl< DefinitionsType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->definitions_)
            {
              ::std::unique_ptr< DefinitionsType > r (
                dynamic_cast< DefinitionsType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->definitions_.set (::std::move (r));
              continue;
            }
          }
        }

        break;
      }
    }

    SupportedOnTable* SupportedOnTable::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class SupportedOnTable (*this, f, c);
    }

    SupportedOnTable& SupportedOnTable::
    operator= (const SupportedOnTable& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->products_ = x.products_;
        this->definitions_ = x.definitions_;
      }

      return *this;
    }

    SupportedOnTable::
    ~SupportedOnTable ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, SupportedOnTable >
    _xsd_SupportedOnTable_type_factory_init (
      "SupportedOnTable",
      "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions");

    // CategoryList
    //

    CategoryList::
    CategoryList ()
    : ::xml_schema::Type (),
      category_ (this)
    {
    }

    CategoryList::
    CategoryList (const CategoryList& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      category_ (x.category_, f, this)
    {
    }

    CategoryList::
    CategoryList (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      category_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void CategoryList::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // category
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "category",
              "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions",
              &::xsd::cxx::tree::factory_impl< CategoryType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< CategoryType > r (
              dynamic_cast< CategoryType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->category_.push_back (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    CategoryList* CategoryList::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class CategoryList (*this, f, c);
    }

    CategoryList& CategoryList::
    operator= (const CategoryList& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->category_ = x.category_;
      }

      return *this;
    }

    CategoryList::
    ~CategoryList ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, CategoryList >
    _xsd_CategoryList_type_factory_init (
      "CategoryList",
      "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions");

    // PolicyNamespaceAssociation
    //

    PolicyNamespaceAssociation::
    PolicyNamespaceAssociation (const PrefixType& prefix,
                                const NamespaceType& namespace_)
    : ::xml_schema::Type (),
      prefix_ (prefix, this),
      namespace__ (namespace_, this)
    {
    }

    PolicyNamespaceAssociation::
    PolicyNamespaceAssociation (const PolicyNamespaceAssociation& x,
                                ::xml_schema::Flags f,
                                ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      prefix_ (x.prefix_, f, this),
      namespace__ (x.namespace__, f, this)
    {
    }

    PolicyNamespaceAssociation::
    PolicyNamespaceAssociation (const ::xercesc::DOMElement& e,
                                ::xml_schema::Flags f,
                                ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      prefix_ (this),
      namespace__ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
        this->parse (p, f);
      }
    }

    void PolicyNamespaceAssociation::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "prefix" && n.namespace_ ().empty ())
        {
          this->prefix_.set (PrefixTraits::create (i, f, this));
          continue;
        }

        if (n.name () == "namespace" && n.namespace_ ().empty ())
        {
          this->namespace__.set (NamespaceTraits::create (i, f, this));
          continue;
        }
      }

      if (!prefix_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "prefix",
          "");
      }

      if (!namespace__.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "namespace",
          "");
      }
    }

    PolicyNamespaceAssociation* PolicyNamespaceAssociation::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class PolicyNamespaceAssociation (*this, f, c);
    }

    PolicyNamespaceAssociation& PolicyNamespaceAssociation::
    operator= (const PolicyNamespaceAssociation& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->prefix_ = x.prefix_;
        this->namespace__ = x.namespace__;
      }

      return *this;
    }

    PolicyNamespaceAssociation::
    ~PolicyNamespaceAssociation ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, PolicyNamespaceAssociation >
    _xsd_PolicyNamespaceAssociation_type_factory_init (
      "PolicyNamespaceAssociation",
      "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions");

    // PolicyNamespaces
    //

    PolicyNamespaces::
    PolicyNamespaces (const TargetType& target)
    : ::xml_schema::Type (),
      target_ (target, this),
      using__ (this)
    {
    }

    PolicyNamespaces::
    PolicyNamespaces (::std::unique_ptr< TargetType > target)
    : ::xml_schema::Type (),
      target_ (std::move (target), this),
      using__ (this)
    {
    }

    PolicyNamespaces::
    PolicyNamespaces (const PolicyNamespaces& x,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      target_ (x.target_, f, this),
      using__ (x.using__, f, this)
    {
    }

    PolicyNamespaces::
    PolicyNamespaces (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      target_ (this),
      using__ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void PolicyNamespaces::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // target
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "target",
              "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions",
              &::xsd::cxx::tree::factory_impl< TargetType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!target_.present ())
            {
              ::std::unique_ptr< TargetType > r (
                dynamic_cast< TargetType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->target_.set (::std::move (r));
              continue;
            }
          }
        }

        // using
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "using",
              "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions",
              &::xsd::cxx::tree::factory_impl< UsingType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< UsingType > r (
              dynamic_cast< UsingType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->using__.push_back (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!target_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "target",
          "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions");
      }
    }

    PolicyNamespaces* PolicyNamespaces::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class PolicyNamespaces (*this, f, c);
    }

    PolicyNamespaces& PolicyNamespaces::
    operator= (const PolicyNamespaces& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->target_ = x.target_;
        this->using__ = x.using__;
      }

      return *this;
    }

    PolicyNamespaces::
    ~PolicyNamespaces ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, PolicyNamespaces >
    _xsd_PolicyNamespaces_type_factory_init (
      "PolicyNamespaces",
      "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions");

    // LocalizationResourceReference
    //

    const LocalizationResourceReference::FallbackCultureType LocalizationResourceReference::fallbackCulture_default_value_ (
      "en-US");

    LocalizationResourceReference::
    LocalizationResourceReference (const MinRequiredRevisionType& minRequiredRevision)
    : ::xml_schema::Type (),
      minRequiredRevision_ (minRequiredRevision, this),
      fallbackCulture_ (fallbackCulture_default_value (), this)
    {
    }

    LocalizationResourceReference::
    LocalizationResourceReference (const LocalizationResourceReference& x,
                                   ::xml_schema::Flags f,
                                   ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      minRequiredRevision_ (x.minRequiredRevision_, f, this),
      fallbackCulture_ (x.fallbackCulture_, f, this)
    {
    }

    LocalizationResourceReference::
    LocalizationResourceReference (const ::xercesc::DOMElement& e,
                                   ::xml_schema::Flags f,
                                   ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      minRequiredRevision_ (this),
      fallbackCulture_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
        this->parse (p, f);
      }
    }

    void LocalizationResourceReference::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "minRequiredRevision" && n.namespace_ ().empty ())
        {
          this->minRequiredRevision_.set (MinRequiredRevisionTraits::create (i, f, this));
          continue;
        }

        if (n.name () == "fallbackCulture" && n.namespace_ ().empty ())
        {
          this->fallbackCulture_.set (FallbackCultureTraits::create (i, f, this));
          continue;
        }
      }

      if (!minRequiredRevision_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "minRequiredRevision",
          "");
      }

      if (!fallbackCulture_.present ())
      {
        this->fallbackCulture_.set (fallbackCulture_default_value ());
      }
    }

    LocalizationResourceReference* LocalizationResourceReference::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class LocalizationResourceReference (*this, f, c);
    }

    LocalizationResourceReference& LocalizationResourceReference::
    operator= (const LocalizationResourceReference& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->minRequiredRevision_ = x.minRequiredRevision_;
        this->fallbackCulture_ = x.fallbackCulture_;
      }

      return *this;
    }

    LocalizationResourceReference::
    ~LocalizationResourceReference ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, LocalizationResourceReference >
    _xsd_LocalizationResourceReference_type_factory_init (
      "LocalizationResourceReference",
      "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions");

    // PolicyDefinitions
    //

    PolicyDefinitions::
    PolicyDefinitions (const PolicyNamespacesType& policyNamespaces,
                       const ResourcesType& resources,
                       const RevisionType& revision,
                       const SchemaVersionType& schemaVersion)
    : ::xml_schema::Type (),
      policyNamespaces_ (policyNamespaces, this),
      supersededAdm_ (this),
      annotation_ (this),
      resources_ (resources, this),
      supportedOn_ (this),
      categories_ (this),
      policies_ (this),
      revision_ (revision, this),
      schemaVersion_ (schemaVersion, this)
    {
    }

    PolicyDefinitions::
    PolicyDefinitions (::std::unique_ptr< PolicyNamespacesType > policyNamespaces,
                       ::std::unique_ptr< ResourcesType > resources,
                       const RevisionType& revision,
                       const SchemaVersionType& schemaVersion)
    : ::xml_schema::Type (),
      policyNamespaces_ (std::move (policyNamespaces), this),
      supersededAdm_ (this),
      annotation_ (this),
      resources_ (std::move (resources), this),
      supportedOn_ (this),
      categories_ (this),
      policies_ (this),
      revision_ (revision, this),
      schemaVersion_ (schemaVersion, this)
    {
    }

    PolicyDefinitions::
    PolicyDefinitions (const PolicyDefinitions& x,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      policyNamespaces_ (x.policyNamespaces_, f, this),
      supersededAdm_ (x.supersededAdm_, f, this),
      annotation_ (x.annotation_, f, this),
      resources_ (x.resources_, f, this),
      supportedOn_ (x.supportedOn_, f, this),
      categories_ (x.categories_, f, this),
      policies_ (x.policies_, f, this),
      revision_ (x.revision_, f, this),
      schemaVersion_ (x.schemaVersion_, f, this)
    {
    }

    PolicyDefinitions::
    PolicyDefinitions (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      policyNamespaces_ (this),
      supersededAdm_ (this),
      annotation_ (this),
      resources_ (this),
      supportedOn_ (this),
      categories_ (this),
      policies_ (this),
      revision_ (this),
      schemaVersion_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void PolicyDefinitions::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // policyNamespaces
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "policyNamespaces",
              "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions",
              &::xsd::cxx::tree::factory_impl< PolicyNamespacesType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!policyNamespaces_.present ())
            {
              ::std::unique_ptr< PolicyNamespacesType > r (
                dynamic_cast< PolicyNamespacesType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->policyNamespaces_.set (::std::move (r));
              continue;
            }
          }
        }

        // supersededAdm
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "supersededAdm",
              "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions",
              &::xsd::cxx::tree::factory_impl< SupersededAdmType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< SupersededAdmType > r (
              dynamic_cast< SupersededAdmType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->supersededAdm_.push_back (::std::move (r));
            continue;
          }
        }

        // annotation
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "annotation",
              "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions",
              &::xsd::cxx::tree::factory_impl< AnnotationType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< AnnotationType > r (
              dynamic_cast< AnnotationType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->annotation_.push_back (::std::move (r));
            continue;
          }
        }

        // resources
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "resources",
              "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions",
              &::xsd::cxx::tree::factory_impl< ResourcesType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!resources_.present ())
            {
              ::std::unique_ptr< ResourcesType > r (
                dynamic_cast< ResourcesType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->resources_.set (::std::move (r));
              continue;
            }
          }
        }

        // supportedOn
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "supportedOn",
              "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions",
              &::xsd::cxx::tree::factory_impl< SupportedOnType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->supportedOn_)
            {
              ::std::unique_ptr< SupportedOnType > r (
                dynamic_cast< SupportedOnType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->supportedOn_.set (::std::move (r));
              continue;
            }
          }
        }

        // categories
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "categories",
              "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions",
              &::xsd::cxx::tree::factory_impl< CategoriesType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->categories_)
            {
              ::std::unique_ptr< CategoriesType > r (
                dynamic_cast< CategoriesType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->categories_.set (::std::move (r));
              continue;
            }
          }
        }

        // policies
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "policies",
              "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions",
              &::xsd::cxx::tree::factory_impl< PoliciesType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->policies_)
            {
              ::std::unique_ptr< PoliciesType > r (
                dynamic_cast< PoliciesType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->policies_.set (::std::move (r));
              continue;
            }
          }
        }

        break;
      }

      if (!policyNamespaces_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "policyNamespaces",
          "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions");
      }

      if (!resources_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "resources",
          "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "revision" && n.namespace_ ().empty ())
        {
          this->revision_.set (RevisionTraits::create (i, f, this));
          continue;
        }

        if (n.name () == "schemaVersion" && n.namespace_ ().empty ())
        {
          this->schemaVersion_.set (SchemaVersionTraits::create (i, f, this));
          continue;
        }
      }

      if (!revision_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "revision",
          "");
      }

      if (!schemaVersion_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "schemaVersion",
          "");
      }
    }

    PolicyDefinitions* PolicyDefinitions::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class PolicyDefinitions (*this, f, c);
    }

    PolicyDefinitions& PolicyDefinitions::
    operator= (const PolicyDefinitions& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->policyNamespaces_ = x.policyNamespaces_;
        this->supersededAdm_ = x.supersededAdm_;
        this->annotation_ = x.annotation_;
        this->resources_ = x.resources_;
        this->supportedOn_ = x.supportedOn_;
        this->categories_ = x.categories_;
        this->policies_ = x.policies_;
        this->revision_ = x.revision_;
        this->schemaVersion_ = x.schemaVersion_;
      }

      return *this;
    }

    PolicyDefinitions::
    ~PolicyDefinitions ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, PolicyDefinitions >
    _xsd_PolicyDefinitions_type_factory_init (
      "PolicyDefinitions",
      "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions");

    // PolicyDefinitionResources
    //

    PolicyDefinitionResources::
    PolicyDefinitionResources (const DisplayNameType& displayName,
                               const DescriptionType& description,
                               const ResourcesType& resources,
                               const RevisionType& revision,
                               const SchemaVersionType& schemaVersion)
    : ::xml_schema::Type (),
      displayName_ (displayName, this),
      description_ (description, this),
      annotation_ (this),
      resources_ (resources, this),
      revision_ (revision, this),
      schemaVersion_ (schemaVersion, this)
    {
    }

    PolicyDefinitionResources::
    PolicyDefinitionResources (const DisplayNameType& displayName,
                               const DescriptionType& description,
                               ::std::unique_ptr< ResourcesType > resources,
                               const RevisionType& revision,
                               const SchemaVersionType& schemaVersion)
    : ::xml_schema::Type (),
      displayName_ (displayName, this),
      description_ (description, this),
      annotation_ (this),
      resources_ (std::move (resources), this),
      revision_ (revision, this),
      schemaVersion_ (schemaVersion, this)
    {
    }

    PolicyDefinitionResources::
    PolicyDefinitionResources (::std::unique_ptr< DisplayNameType > displayName,
                               ::std::unique_ptr< DescriptionType > description,
                               ::std::unique_ptr< ResourcesType > resources,
                               const RevisionType& revision,
                               const SchemaVersionType& schemaVersion)
    : ::xml_schema::Type (),
      displayName_ (std::move (displayName), this),
      description_ (std::move (description), this),
      annotation_ (this),
      resources_ (std::move (resources), this),
      revision_ (revision, this),
      schemaVersion_ (schemaVersion, this)
    {
    }

    PolicyDefinitionResources::
    PolicyDefinitionResources (const PolicyDefinitionResources& x,
                               ::xml_schema::Flags f,
                               ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      displayName_ (x.displayName_, f, this),
      description_ (x.description_, f, this),
      annotation_ (x.annotation_, f, this),
      resources_ (x.resources_, f, this),
      revision_ (x.revision_, f, this),
      schemaVersion_ (x.schemaVersion_, f, this)
    {
    }

    PolicyDefinitionResources::
    PolicyDefinitionResources (const ::xercesc::DOMElement& e,
                               ::xml_schema::Flags f,
                               ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      displayName_ (this),
      description_ (this),
      annotation_ (this),
      resources_ (this),
      revision_ (this),
      schemaVersion_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void PolicyDefinitionResources::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // displayName
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "displayName",
              "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions",
              &::xsd::cxx::tree::factory_impl< DisplayNameType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!displayName_.present ())
            {
              ::std::unique_ptr< DisplayNameType > r (
                dynamic_cast< DisplayNameType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->displayName_.set (::std::move (r));
              continue;
            }
          }
        }

        // description
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "description",
              "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions",
              &::xsd::cxx::tree::factory_impl< DescriptionType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!description_.present ())
            {
              ::std::unique_ptr< DescriptionType > r (
                dynamic_cast< DescriptionType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->description_.set (::std::move (r));
              continue;
            }
          }
        }

        // annotation
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "annotation",
              "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions",
              &::xsd::cxx::tree::factory_impl< AnnotationType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< AnnotationType > r (
              dynamic_cast< AnnotationType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->annotation_.push_back (::std::move (r));
            continue;
          }
        }

        // resources
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "resources",
              "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions",
              &::xsd::cxx::tree::factory_impl< ResourcesType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!resources_.present ())
            {
              ::std::unique_ptr< ResourcesType > r (
                dynamic_cast< ResourcesType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->resources_.set (::std::move (r));
              continue;
            }
          }
        }

        break;
      }

      if (!displayName_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "displayName",
          "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions");
      }

      if (!description_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "description",
          "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions");
      }

      if (!resources_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "resources",
          "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "revision" && n.namespace_ ().empty ())
        {
          this->revision_.set (RevisionTraits::create (i, f, this));
          continue;
        }

        if (n.name () == "schemaVersion" && n.namespace_ ().empty ())
        {
          this->schemaVersion_.set (SchemaVersionTraits::create (i, f, this));
          continue;
        }
      }

      if (!revision_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "revision",
          "");
      }

      if (!schemaVersion_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "schemaVersion",
          "");
      }
    }

    PolicyDefinitionResources* PolicyDefinitionResources::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class PolicyDefinitionResources (*this, f, c);
    }

    PolicyDefinitionResources& PolicyDefinitionResources::
    operator= (const PolicyDefinitionResources& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->displayName_ = x.displayName_;
        this->description_ = x.description_;
        this->annotation_ = x.annotation_;
        this->resources_ = x.resources_;
        this->revision_ = x.revision_;
        this->schemaVersion_ = x.schemaVersion_;
      }

      return *this;
    }

    PolicyDefinitionResources::
    ~PolicyDefinitionResources ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, PolicyDefinitionResources >
    _xsd_PolicyDefinitionResources_type_factory_init (
      "PolicyDefinitionResources",
      "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions");

    // StringTable
    //

    StringTable::
    StringTable ()
    : ::xml_schema::Type (),
      string_ (this)
    {
    }

    StringTable::
    StringTable (const StringTable& x,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      string_ (x.string_, f, this)
    {
    }

    StringTable::
    StringTable (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      string_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void StringTable::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // string
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "string",
              "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions",
              &::xsd::cxx::tree::factory_impl< StringType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< StringType > r (
              dynamic_cast< StringType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->string_.push_back (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    StringTable* StringTable::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class StringTable (*this, f, c);
    }

    StringTable& StringTable::
    operator= (const StringTable& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->string_ = x.string_;
      }

      return *this;
    }

    StringTable::
    ~StringTable ()
    {
    }

    // PresentationTable
    //

    PresentationTable::
    PresentationTable ()
    : ::xml_schema::Type (),
      presentation_ (this)
    {
    }

    PresentationTable::
    PresentationTable (const PresentationTable& x,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      presentation_ (x.presentation_, f, this)
    {
    }

    PresentationTable::
    PresentationTable (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      presentation_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void PresentationTable::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // presentation
        //
        {
          ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "presentation",
              "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions",
              &::xsd::cxx::tree::factory_impl< PresentationType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::unique_ptr< PresentationType > r (
              dynamic_cast< PresentationType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->presentation_.push_back (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    PresentationTable* PresentationTable::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class PresentationTable (*this, f, c);
    }

    PresentationTable& PresentationTable::
    operator= (const PresentationTable& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->presentation_ = x.presentation_;
      }

      return *this;
    }

    PresentationTable::
    ~PresentationTable ()
    {
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace GroupPolicy
{
  namespace PolicyDefinitions
  {
    ::std::ostream&
    operator<< (::std::ostream& o, const Localization& i)
    {
      if (i.stringTable ())
      {
        o << ::std::endl << "stringTable: " << *i.stringTable ();
      }

      if (i.presentationTable ())
      {
        o << ::std::endl << "presentationTable: " << *i.presentationTable ();
      }

      return o;
    }

    static
    const ::xsd::cxx::tree::std_ostream_initializer< 0, char, Localization >
    _xsd_Localization_std_ostream_init;

    ::std::ostream&
    operator<< (::std::ostream& o, const FileReference& i)
    {
      o << ::std::endl << "fileName: " << i.fileName ();
      return o;
    }

    static
    const ::xsd::cxx::tree::std_ostream_initializer< 0, char, FileReference >
    _xsd_FileReference_std_ostream_init;

    ::std::ostream&
    operator<< (::std::ostream& o, const PolicyList& i)
    {
      {
        ::xsd::cxx::tree::std_ostream_map< char >& om (
          ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

        for (PolicyList::PolicyConstIterator
             b (i.policy ().begin ()), e (i.policy ().end ());
             b != e; ++b)
        {
          o << ::std::endl << "policy: ";
          om.insert (o, *b);
        }
      }

      return o;
    }

    static
    const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PolicyList >
    _xsd_PolicyList_std_ostream_init;

    ::std::ostream&
    operator<< (::std::ostream& o, const SupportedOnTable& i)
    {
      {
        ::xsd::cxx::tree::std_ostream_map< char >& om (
          ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

        if (i.products ())
        {
          o << ::std::endl << "products: ";
          om.insert (o, *i.products ());
        }
      }

      {
        ::xsd::cxx::tree::std_ostream_map< char >& om (
          ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

        if (i.definitions ())
        {
          o << ::std::endl << "definitions: ";
          om.insert (o, *i.definitions ());
        }
      }

      return o;
    }

    static
    const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SupportedOnTable >
    _xsd_SupportedOnTable_std_ostream_init;

    ::std::ostream&
    operator<< (::std::ostream& o, const CategoryList& i)
    {
      {
        ::xsd::cxx::tree::std_ostream_map< char >& om (
          ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

        for (CategoryList::CategoryConstIterator
             b (i.category ().begin ()), e (i.category ().end ());
             b != e; ++b)
        {
          o << ::std::endl << "category: ";
          om.insert (o, *b);
        }
      }

      return o;
    }

    static
    const ::xsd::cxx::tree::std_ostream_initializer< 0, char, CategoryList >
    _xsd_CategoryList_std_ostream_init;

    ::std::ostream&
    operator<< (::std::ostream& o, const PolicyNamespaceAssociation& i)
    {
      o << ::std::endl << "prefix: " << i.prefix ();
      o << ::std::endl << "namespace: " << i.namespace_ ();
      return o;
    }

    static
    const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PolicyNamespaceAssociation >
    _xsd_PolicyNamespaceAssociation_std_ostream_init;

    ::std::ostream&
    operator<< (::std::ostream& o, const PolicyNamespaces& i)
    {
      {
        ::xsd::cxx::tree::std_ostream_map< char >& om (
          ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

        o << ::std::endl << "target: ";
        om.insert (o, i.target ());
      }

      {
        ::xsd::cxx::tree::std_ostream_map< char >& om (
          ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

        for (PolicyNamespaces::UsingConstIterator
             b (i.using_ ().begin ()), e (i.using_ ().end ());
             b != e; ++b)
        {
          o << ::std::endl << "using: ";
          om.insert (o, *b);
        }
      }

      return o;
    }

    static
    const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PolicyNamespaces >
    _xsd_PolicyNamespaces_std_ostream_init;

    ::std::ostream&
    operator<< (::std::ostream& o, const LocalizationResourceReference& i)
    {
      o << ::std::endl << "minRequiredRevision: " << i.minRequiredRevision ();
      o << ::std::endl << "fallbackCulture: " << i.fallbackCulture ();
      return o;
    }

    static
    const ::xsd::cxx::tree::std_ostream_initializer< 0, char, LocalizationResourceReference >
    _xsd_LocalizationResourceReference_std_ostream_init;

    ::std::ostream&
    operator<< (::std::ostream& o, const PolicyDefinitions& i)
    {
      {
        ::xsd::cxx::tree::std_ostream_map< char >& om (
          ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

        o << ::std::endl << "policyNamespaces: ";
        om.insert (o, i.policyNamespaces ());
      }

      {
        ::xsd::cxx::tree::std_ostream_map< char >& om (
          ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

        for (PolicyDefinitions::SupersededAdmConstIterator
             b (i.supersededAdm ().begin ()), e (i.supersededAdm ().end ());
             b != e; ++b)
        {
          o << ::std::endl << "supersededAdm: ";
          om.insert (o, *b);
        }
      }

      {
        ::xsd::cxx::tree::std_ostream_map< char >& om (
          ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

        for (PolicyDefinitions::AnnotationConstIterator
             b (i.annotation ().begin ()), e (i.annotation ().end ());
             b != e; ++b)
        {
          o << ::std::endl << "annotation: ";
          om.insert (o, *b);
        }
      }

      {
        ::xsd::cxx::tree::std_ostream_map< char >& om (
          ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

        o << ::std::endl << "resources: ";
        om.insert (o, i.resources ());
      }

      {
        ::xsd::cxx::tree::std_ostream_map< char >& om (
          ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

        if (i.supportedOn ())
        {
          o << ::std::endl << "supportedOn: ";
          om.insert (o, *i.supportedOn ());
        }
      }

      {
        ::xsd::cxx::tree::std_ostream_map< char >& om (
          ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

        if (i.categories ())
        {
          o << ::std::endl << "categories: ";
          om.insert (o, *i.categories ());
        }
      }

      {
        ::xsd::cxx::tree::std_ostream_map< char >& om (
          ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

        if (i.policies ())
        {
          o << ::std::endl << "policies: ";
          om.insert (o, *i.policies ());
        }
      }

      o << ::std::endl << "revision: " << i.revision ();
      o << ::std::endl << "schemaVersion: " << i.schemaVersion ();
      return o;
    }

    static
    const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PolicyDefinitions >
    _xsd_PolicyDefinitions_std_ostream_init;

    ::std::ostream&
    operator<< (::std::ostream& o, const PolicyDefinitionResources& i)
    {
      {
        ::xsd::cxx::tree::std_ostream_map< char >& om (
          ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

        o << ::std::endl << "displayName: ";
        om.insert (o, i.displayName ());
      }

      {
        ::xsd::cxx::tree::std_ostream_map< char >& om (
          ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

        o << ::std::endl << "description: ";
        om.insert (o, i.description ());
      }

      {
        ::xsd::cxx::tree::std_ostream_map< char >& om (
          ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

        for (PolicyDefinitionResources::AnnotationConstIterator
             b (i.annotation ().begin ()), e (i.annotation ().end ());
             b != e; ++b)
        {
          o << ::std::endl << "annotation: ";
          om.insert (o, *b);
        }
      }

      {
        ::xsd::cxx::tree::std_ostream_map< char >& om (
          ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

        o << ::std::endl << "resources: ";
        om.insert (o, i.resources ());
      }

      o << ::std::endl << "revision: " << i.revision ();
      o << ::std::endl << "schemaVersion: " << i.schemaVersion ();
      return o;
    }

    static
    const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PolicyDefinitionResources >
    _xsd_PolicyDefinitionResources_std_ostream_init;

    ::std::ostream&
    operator<< (::std::ostream& o, const StringTable& i)
    {
      {
        ::xsd::cxx::tree::std_ostream_map< char >& om (
          ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

        for (StringTable::StringConstIterator
             b (i.string ().begin ()), e (i.string ().end ());
             b != e; ++b)
        {
          o << ::std::endl << "string: ";
          om.insert (o, *b);
        }
      }

      return o;
    }

    ::std::ostream&
    operator<< (::std::ostream& o, const PresentationTable& i)
    {
      {
        ::xsd::cxx::tree::std_ostream_map< char >& om (
          ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

        for (PresentationTable::PresentationConstIterator
             b (i.presentation ().begin ()), e (i.presentation ().end ());
             b != e; ++b)
        {
          o << ::std::endl << "presentation: ";
          om.insert (o, *b);
        }
      }

      return o;
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace GroupPolicy
{
  namespace PolicyDefinitions
  {
    ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitions >
    policyDefinitions (const ::std::string& u,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitions > (
        ::GroupPolicy::PolicyDefinitions::policyDefinitions (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitions >
    policyDefinitions (const ::std::string& u,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitions > (
        ::GroupPolicy::PolicyDefinitions::policyDefinitions (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitions >
    policyDefinitions (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitions > (
        ::GroupPolicy::PolicyDefinitions::policyDefinitions (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitions >
    policyDefinitions (::std::istream& is,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::GroupPolicy::PolicyDefinitions::policyDefinitions (isrc, f, p);
    }

    ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitions >
    policyDefinitions (::std::istream& is,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::GroupPolicy::PolicyDefinitions::policyDefinitions (isrc, h, f, p);
    }

    ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitions >
    policyDefinitions (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::GroupPolicy::PolicyDefinitions::policyDefinitions (isrc, h, f, p);
    }

    ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitions >
    policyDefinitions (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::GroupPolicy::PolicyDefinitions::policyDefinitions (isrc, f, p);
    }

    ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitions >
    policyDefinitions (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::GroupPolicy::PolicyDefinitions::policyDefinitions (isrc, h, f, p);
    }

    ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitions >
    policyDefinitions (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::GroupPolicy::PolicyDefinitions::policyDefinitions (isrc, h, f, p);
    }

    ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitions >
    policyDefinitions (::xercesc::InputSource& i,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitions > (
        ::GroupPolicy::PolicyDefinitions::policyDefinitions (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitions >
    policyDefinitions (::xercesc::InputSource& i,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitions > (
        ::GroupPolicy::PolicyDefinitions::policyDefinitions (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitions >
    policyDefinitions (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitions > (
        ::GroupPolicy::PolicyDefinitions::policyDefinitions (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitions >
    policyDefinitions (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitions > (
          ::GroupPolicy::PolicyDefinitions::policyDefinitions (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "policyDefinitions",
          "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions",
          &::xsd::cxx::tree::factory_impl< ::GroupPolicy::PolicyDefinitions::PolicyDefinitions >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitions > r (
          dynamic_cast< ::GroupPolicy::PolicyDefinitions::PolicyDefinitions* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "policyDefinitions",
        "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions");
    }

    ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitions >
    policyDefinitions (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "policyDefinitions",
          "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions",
          &::xsd::cxx::tree::factory_impl< ::GroupPolicy::PolicyDefinitions::PolicyDefinitions >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitions > r (
          dynamic_cast< ::GroupPolicy::PolicyDefinitions::PolicyDefinitions* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "policyDefinitions",
        "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions");
    }

    ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitionResources >
    policyDefinitionResources (const ::std::string& u,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitionResources > (
        ::GroupPolicy::PolicyDefinitions::policyDefinitionResources (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitionResources >
    policyDefinitionResources (const ::std::string& u,
                               ::xml_schema::ErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitionResources > (
        ::GroupPolicy::PolicyDefinitions::policyDefinitionResources (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitionResources >
    policyDefinitionResources (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitionResources > (
        ::GroupPolicy::PolicyDefinitions::policyDefinitionResources (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitionResources >
    policyDefinitionResources (::std::istream& is,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::GroupPolicy::PolicyDefinitions::policyDefinitionResources (isrc, f, p);
    }

    ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitionResources >
    policyDefinitionResources (::std::istream& is,
                               ::xml_schema::ErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::GroupPolicy::PolicyDefinitions::policyDefinitionResources (isrc, h, f, p);
    }

    ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitionResources >
    policyDefinitionResources (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::GroupPolicy::PolicyDefinitions::policyDefinitionResources (isrc, h, f, p);
    }

    ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitionResources >
    policyDefinitionResources (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::GroupPolicy::PolicyDefinitions::policyDefinitionResources (isrc, f, p);
    }

    ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitionResources >
    policyDefinitionResources (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::ErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::GroupPolicy::PolicyDefinitions::policyDefinitionResources (isrc, h, f, p);
    }

    ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitionResources >
    policyDefinitionResources (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::GroupPolicy::PolicyDefinitions::policyDefinitionResources (isrc, h, f, p);
    }

    ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitionResources >
    policyDefinitionResources (::xercesc::InputSource& i,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitionResources > (
        ::GroupPolicy::PolicyDefinitions::policyDefinitionResources (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitionResources >
    policyDefinitionResources (::xercesc::InputSource& i,
                               ::xml_schema::ErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitionResources > (
        ::GroupPolicy::PolicyDefinitions::policyDefinitionResources (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitionResources >
    policyDefinitionResources (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitionResources > (
        ::GroupPolicy::PolicyDefinitions::policyDefinitionResources (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitionResources >
    policyDefinitionResources (const ::xercesc::DOMDocument& doc,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitionResources > (
          ::GroupPolicy::PolicyDefinitions::policyDefinitionResources (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "policyDefinitionResources",
          "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions",
          &::xsd::cxx::tree::factory_impl< ::GroupPolicy::PolicyDefinitions::PolicyDefinitionResources >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitionResources > r (
          dynamic_cast< ::GroupPolicy::PolicyDefinitions::PolicyDefinitionResources* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "policyDefinitionResources",
        "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions");
    }

    ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitionResources >
    policyDefinitionResources (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "policyDefinitionResources",
          "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions",
          &::xsd::cxx::tree::factory_impl< ::GroupPolicy::PolicyDefinitions::PolicyDefinitionResources >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::unique_ptr< ::GroupPolicy::PolicyDefinitions::PolicyDefinitionResources > r (
          dynamic_cast< ::GroupPolicy::PolicyDefinitions::PolicyDefinitionResources* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "policyDefinitionResources",
        "http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions");
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

